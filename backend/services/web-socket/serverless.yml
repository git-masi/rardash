service: rardash-web-socket

frameworkVersion: '2'

projectDir: ../../

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.shared.deploymentBucket}
  deploymentPrefix: ${self:custom.basename}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  websocketsApiName: rardash-web-socket
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    CONNECTIONS_TABLE_NAME: ${self:custom.shared.resources.connectionsTableName}
    # The way this is used we need the https endpoint not the wss endpoint
    # figure out a way to manage that in the future
    # WS_API_ENDPOINT: '' # This is used for the initial deploy when rardash-web-socket doesn't exist
    WS_API_ENDPOINT: ${cf:rardash-web-socket-${self:provider.stage}.ServiceEndpointWebsocket}
    STORE_ID_INDEX: connectionsStoreId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource:
        - ${self:custom.shared.resources.connectionsTableArn}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - ${cf:rardash-http-${self:provider.stage}.RARDashMainTableArn}

custom:
  basename: ${self:service}-${self:provider.stage}
  shared: ${file(../../serverless.common.yml):shared}

functions:
  defaultHandler:
    handler: web-socket-handlers/defaultHandler.handler
    events:
      - websocket:
          route: $default

  connect:
    handler: web-socket-handlers/connect.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: wsConnectAuthorizer
            identitySource:
              - 'route.request.querystring.authorization'

  disconnect:
    handler: web-socket-handlers/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  # KeepConnectionAlive:
  #   handler: web-socket-handlers/keepConnectionAlive.handler
  #   events:
  #     - websocket:
  #         route: keepAlive

  ordersStream:
    handler: stream-handlers/ordersStream.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn: ${cf:rardash-http-${self:provider.stage}.RARDashMainTableStreamArn}
          enabled: true

  # tableCleanup:
  #   handler: web-socket-handlers/tableCleanup.handler
  #   events:
  #     # runs daily at 4am UTC (11pm EST)
  #     - schedule: cron(0 4 * * ? *)

  wsConnectAuthorizer:
    handler: authorizers/wsConnectAuthorizer.handler
