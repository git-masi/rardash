service: rardash-http

frameworkVersion: '2'

projectDir: ../../

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.deploymentBucket}
  deploymentPrefix: ${self:custom.basename}
  lambdaHashingVersion: 20201221
  memorySize: 256
  environment:
    JOBS_SERVICE_NAME: ${self:custom.stacks.jobs}
    BASE_NAME: ${self:custom.basename}
    MAIN_TABLE_NAME: ${self:custom.resources.mainTableName}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.resources.mainTableArn}
    - Effect: Allow
      Action:
        - events:ListRules
        - events:EnableRule
        - events:DisableRule
      Resource:
        - arn:aws:events:${self:provider.region}:${aws:accountId}:rule/*

custom:
  basename: ${self:service}-${self:provider.stage}
  deploymentBucket: ${file(../../serverless.common.yml):deploymentBucket}
  resources: ${file(../../serverless.common.yml):resources}
  stacks: ${file(../../serverless.common.yml):stacks}

functions:
  createOrder:
    handler: api-handlers/createOrder.handler
    events:
      - http:
          method: POST
          path: /orders
          cors: true
          authorizer:
            name: clientAuthorizer
          request:
            schema:
              application/json: ${file(schema/createOrder.json)}

  updateOrder:
    handler: api-handlers/updateOrder.handler
    events:
      - http:
          method: PATCH
          path: /orders
          cors: true
          authorizer:
            name: clientAuthorizer
          request:
            schema:
              application/json: ${file(schema/updateOrder.json)}

  readOrders:
    handler: api-handlers/readOrders.handler
    events:
      - http:
          method: GET
          path: /orders
          cors: true
          authorizer:
            name: clientAuthorizer

  createClient:
    handler: api-handlers/createClient.handler
    events:
      - http:
          method: POST
          path: /clients
          cors: true

  test:
    handler: api-handlers/test.handler
    events:
      - http:
          method: POST
          path: /test

  clientAuthorizer:
    handler: authorizers/clientAuthorizer.handler
