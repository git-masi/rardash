service: rardash-http

frameworkVersion: '2'

projectDir: ../../

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.shared.deploymentBucket}
  deploymentPrefix: ${self:custom.basename}
  lambdaHashingVersion: 20201221
  memorySize: 256
  environment:
    JOBS_SERVICE_NAME: ${self:custom.stacks.jobs}
    BASE_NAME: ${self:custom.basename}
    MAIN_TABLE_NAME: ${self:custom.shared.resources.mainTableName}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.shared.resources.mainTableArn}
        - ${self:custom.shared.resources.mainTableIndexArns}

custom:
  basename: ${self:service}-${self:provider.stage}
  shared: ${file(../../serverless.common.yml):shared}
  stacks: ${file(../../serverless.common.yml):stacks}

functions:
  createOrder:
    handler: api-handlers/createOrder.handler
    events:
      - http:
          method: POST
          path: /orders
          cors: true
          authorizer:
            name: clientAuthorizer
          request:
            schema:
              application/json: ${file(schema/createOrder.json)}

    readOrders:
      handler: api-handlers/readOrders.handler
      events:
        - http:
            method: GET
            path: /orders
            cors: true
            authorizer:
              name: clientAuthorizer

  createClient:
    handler: api-handlers/createClient.handler
    events:
      - http:
          method: POST
          path: /clients
          cors: true
          # authorizer:
          #   name: clientAuthorizer
          # request:
          #   schema:
          #     application/json: ${file(schema/createOrder.json)}

  clientAuthorizer:
    handler: authorizers/clientAuthorizer.handler
