service: rtkq-streaming-http-api

frameworkVersion: '2'

projectDir: ../

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-cloudside-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.sharedBucketName}
  deploymentPrefix: ${self:custom.basename}
  lambdaHashingVersion: 20201221
  memorySize: 256
  environment:
    MAIN_TABLE_NAME: !Ref RtkqStreamingMainTable
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - !GetAtt RtkqStreamingMainTable.Arn
        - !Join ['/', [!GetAtt RtkqStreamingMainTable.Arn, 'index', '*']]

custom:
  basename: ${self:service}-${self:provider.stage}
  sharedBucketName: eric-experiments-k9xjhbjk3r4s
  serverless-offline:
    httpPort: 4321

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    RtkqStreamingMainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RtkqStreamingMainTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  Outputs:
    RtkqStreamingMainTableName:
      Value: !Ref RtkqStreamingMainTable
      Export:
        Name: RtkqStreamingMainTableName
    RtkqStreamingMainTableArn:
      Value: !GetAtt RtkqStreamingMainTable.Arn
      Export:
        Name: RtkqStreamingMainTableArn
    RtkqStreamingMainTableStreamArn:
      Value: !GetAtt RtkqStreamingMainTable.StreamArn
      Export:
        Name: RtkqStreamingMainTableStreamArn

functions:
  orders:
    handler: api-handlers/orders.handler
    events:
      - http:
          method: GET
          path: orders
          cors: true
          authorizer:
            name: storeAuthorizer
      - http:
          method: POST
          path: orders
          cors: true
          authorizer:
            name: storeAuthorizer
          request:
            schema:
              application/json: ${file(schema/createOrder.json)}

  clients:
    handler: api-handlers/clients.handler
    events:
      - http:
          method: POST
          path: clients
          cors: true
          # authorizer:
          #   name: storeAuthorizer
          # request:
          #   schema:
          #     application/json: ${file(schema/createOrder.json)}

  fakeOrders:
    handler: cron-handlers/fakeOrders.handler
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false

  storeAuthorizer:
    handler: authorizers/storeAuthorizer.handler
