service: rtkq-streaming-web-socket-api

frameworkVersion: '2'

projectDir: ../

plugins:
  - serverless-bundle

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.sharedBucketName}
  deploymentPrefix: ${self:custom.basename}
  lambdaHashingVersion: 20201221
  websocketsApiName: rtkq-streaming-web-socket-api
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  environment:
    CONNECTIONS_TABLE_NAME: !Ref RtkqStreamingConnectionsTable
    # The way this is used we need the https endpoint not the wss endpoint
    # figure out a way to manage that in the future
    # WS_API_ENDPOINT: '' # This is used for the initial deploy when rtkq-streaming-web-socket-api doesn't exist
    WS_API_ENDPOINT: ${cf:rtkq-streaming-web-socket-api-${self:provider.stage}.ServiceEndpointWebsocket}
    STORE_ID_INDEX: connectionsStoreId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource:
        - !GetAtt RtkqStreamingConnectionsTable.Arn
        - !Join ['/', [!GetAtt RtkqStreamingConnectionsTable.Arn, 'index', '*']]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - ${cf:rtkq-streaming-http-api-${self:provider.stage}.RtkqStreamingMainTableArn}

custom:
  basename: ${self:service}-${self:provider.stage}
  sharedBucketName: eric-experiments-k9xjhbjk3r4s

resources:
  Resources:
    RtkqStreamingConnectionsTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      # UpdateReplacePolicy: Retain
      Properties:
        TableName: RtkqStreamingConnectionsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: storeId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: connectionsStoreId
            KeySchema:
              - AttributeName: storeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

functions:
  defaultHandler:
    handler: web-socket-handlers/defaultHandler.handler
    events:
      - websocket:
          route: $default

  connect:
    handler: web-socket-handlers/connect.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: wsConnectAuthorizer
            identitySource:
              - 'route.request.querystring.authorization'

  disconnect:
    handler: web-socket-handlers/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  # KeepConnectionAlive:
  #   handler: web-socket-handlers/keepConnectionAlive.handler
  #   events:
  #     - websocket:
  #         route: keepAlive

  ordersStream:
    handler: stream-handlers/ordersStream.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn: ${cf:rtkq-streaming-http-api-${self:provider.stage}.RtkqStreamingMainTableStreamArn}
          enabled: true

  # tableCleanup:
  #   handler: web-socket-handlers/tableCleanup.handler
  #   events:
  #     # runs daily at 4am UTC (11pm EST)
  #     - schedule: cron(0 4 * * ? *)

  wsConnectAuthorizer:
    handler: authorizers/wsConnectAuthorizer.handler
